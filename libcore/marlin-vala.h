/* marlin-vala.h generated by valac 0.12.0, the Vala compiler, do not modify */


#ifndef __MARLIN_VALA_H__
#define __MARLIN_VALA_H__

#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>

G_BEGIN_DECLS


#define TYPE_LOG (log_get_type ())
#define LOG(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_LOG, Log))
#define LOG_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_LOG, LogClass))
#define IS_LOG(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_LOG))
#define IS_LOG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_LOG))
#define LOG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_LOG, LogClass))

typedef struct _Log Log;
typedef struct _LogClass LogClass;
typedef struct _LogPrivate LogPrivate;

#define LOG_TYPE_LEVEL (log_level_get_type ())

#define LOG_TYPE_COLOR (log_color_get_type ())

struct _Log {
	GObject parent_instance;
	LogPrivate * priv;
};

struct _LogClass {
	GObjectClass parent_class;
};

typedef enum  {
	LOG_LEVEL_FATAL,
	LOG_LEVEL_ERROR,
	LOG_LEVEL_WARN,
	LOG_LEVEL_NOTIFY,
	LOG_LEVEL_INFO,
	LOG_LEVEL_DEBUG,
	LOG_LEVEL_UNDEFINED
} LogLevel;

typedef enum  {
	LOG_COLOR_Black,
	LOG_COLOR_DarkRed,
	LOG_COLOR_DarkGreen,
	LOG_COLOR_DarkYellow,
	LOG_COLOR_DarkBlue,
	LOG_COLOR_DarkMagenta,
	LOG_COLOR_DarkCyan,
	LOG_COLOR_Gray,
	LOG_COLOR_DarkGray,
	LOG_COLOR_Red,
	LOG_COLOR_Green,
	LOG_COLOR_Yellow,
	LOG_COLOR_Blue,
	LOG_COLOR_Magenta,
	LOG_COLOR_Cyan,
	LOG_COLOR_White,
	LOG_COLOR_Reset
} LogColor;


GType log_get_type (void) G_GNUC_CONST;
GType log_level_get_type (void) G_GNUC_CONST;
GType log_color_get_type (void) G_GNUC_CONST;
extern LogLevel log_level;
void log_printf (LogLevel lvl, const gchar* str, ...);
void log_println (LogLevel lvl, const gchar* str, ...);
void log_quick (const gchar* str, ...);
void log_prelude (LogLevel level);
Log* log_new (void);
Log* log_construct (GType object_type);
void truc (void);


G_END_DECLS

#endif
